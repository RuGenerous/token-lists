{"code":"/**\r\n * compares two token info key values\r\n * this subset of full deep equal functionality does not work on objects or object arrays\r\n * @param a comparison item a\r\n * @param b comparison item b\r\n */\r\nfunction compareTokenInfoProperty(a, b) {\r\n    if (a === b)\r\n        return true;\r\n    if (typeof a !== typeof b)\r\n        return false;\r\n    if (Array.isArray(a) && Array.isArray(b)) {\r\n        return a.every((el, i) => b[i] === el);\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Computes the diff of a token list where the first argument is the base and the second argument is the updated list.\r\n * @param base base list\r\n * @param update updated list\r\n */\r\nexport function diffTokenLists(base, update) {\r\n    const indexedBase = base.reduce((memo, tokenInfo) => {\r\n        if (!memo[tokenInfo.chainId])\r\n            memo[tokenInfo.chainId] = {};\r\n        memo[tokenInfo.chainId][tokenInfo.address] = tokenInfo;\r\n        return memo;\r\n    }, {});\r\n    const newListUpdates = update.reduce((memo, tokenInfo) => {\r\n        const baseToken = indexedBase[tokenInfo.chainId]?.[tokenInfo.address];\r\n        if (!baseToken) {\r\n            memo.added.push(tokenInfo);\r\n        }\r\n        else {\r\n            const changes = Object.keys(tokenInfo)\r\n                .filter((s) => s !== 'address' && s !== 'chainId')\r\n                .filter(s => {\r\n                return !compareTokenInfoProperty(tokenInfo[s], baseToken[s]);\r\n            });\r\n            if (changes.length > 0) {\r\n                if (!memo.changed[tokenInfo.chainId]) {\r\n                    memo.changed[tokenInfo.chainId] = {};\r\n                }\r\n                memo.changed[tokenInfo.chainId][tokenInfo.address] = changes;\r\n            }\r\n        }\r\n        if (!memo.index[tokenInfo.chainId]) {\r\n            memo.index[tokenInfo.chainId] = {\r\n                [tokenInfo.address]: true,\r\n            };\r\n        }\r\n        else {\r\n            memo.index[tokenInfo.chainId][tokenInfo.address] = true;\r\n        }\r\n        return memo;\r\n    }, { added: [], changed: {}, index: {} });\r\n    const removed = base.reduce((list, curr) => {\r\n        if (!newListUpdates.index[curr.chainId] ||\r\n            !newListUpdates.index[curr.chainId][curr.address]) {\r\n            list.push(curr);\r\n        }\r\n        return list;\r\n    }, []);\r\n    return {\r\n        added: newListUpdates.added,\r\n        changed: newListUpdates.changed,\r\n        removed,\r\n    };\r\n}\r\n//# sourceMappingURL=diffTokenLists.js.map","references":["/Users/professional/Documents/GitHub/token-lists/src/types.ts"],"map":"{\"version\":3,\"file\":\"diffTokenLists.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/diffTokenLists.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/professional/Documents/GitHub/token-lists/diffTokenLists.d.ts","writeByteOrderMark":false,"text":"import { TokenInfo } from './types';\r\nexport declare type TokenInfoChangeKey = Exclude<keyof TokenInfo, 'address' | 'chainId'>;\r\nexport declare type TokenInfoChanges = Array<TokenInfoChangeKey>;\r\n/**\r\n * Differences between a base list and an updated list.\r\n */\r\nexport interface TokenListDiff {\r\n    /**\r\n     * Tokens from updated with chainId/address not present in base list\r\n     */\r\n    readonly added: TokenInfo[];\r\n    /**\r\n     * Tokens from base with chainId/address not present in the updated list\r\n     */\r\n    readonly removed: TokenInfo[];\r\n    /**\r\n     * The token info that changed\r\n     */\r\n    readonly changed: {\r\n        [chainId: number]: {\r\n            [address: string]: TokenInfoChanges;\r\n        };\r\n    };\r\n}\r\n/**\r\n * Computes the diff of a token list where the first argument is the base and the second argument is the updated list.\r\n * @param base base list\r\n * @param update updated list\r\n */\r\nexport declare function diffTokenLists(base: TokenInfo[], update: TokenInfo[]): TokenListDiff;\r\n"}}
